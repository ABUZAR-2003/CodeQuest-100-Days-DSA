name: Daily PR Auto-Merge with Points

on:
  schedule:
    - cron: '29 18 * * *'  # 11:59 PM IST
  workflow_dispatch:

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write
      statuses: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install PyGithub

      - name: Process PRs and update points
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<'EOF'
          import os
          import json
          import time
          from datetime import datetime, timezone, timedelta
          from github import Github
          from github.GithubException import GithubException

          # Configuration
          POINTS_PER_PR = 3
          MAX_POINTS_PER_DAY = 3
          EVENT_NAME = "Daily PR Challenge"
          MAX_RETRIES = 3
          RETRY_DELAY = 5
          EVENT_START_DATE = datetime(2025, 4, 1).date()

          # Initialize GitHub with retries
          for _ in range(3):
              try:
                  g = Github(os.environ['GITHUB_TOKEN'])
                  repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
                  break
              except Exception as e:
                  print(f"GitHub initialization failed: {str(e)}")
                  time.sleep(5)
          else:
              raise Exception("Failed to initialize GitHub connection after 3 attempts")

          today = datetime.now(timezone.utc).date()

          # Safely load or initialize points data
          def load_points_data():
              try:
                  contents = repo.get_contents("points.json")
                  data = json.loads(contents.decoded_content.decode())
                  # Validate structure
                  if not all(k in data for k in ["users", "history", "metadata"]):
                      raise ValueError("Invalid points.json structure")
                  return data, contents.sha
              except Exception as e:
                  print(f"Initializing new points.json: {str(e)}")
                  return {
                      "users": {},
                      "history": [],
                      "metadata": {
                          "event": EVENT_NAME,
                          "points_per_pr": POINTS_PER_PR,
                          "max_points_per_day": MAX_POINTS_PER_DAY,
                          "event_start_date": EVENT_START_DATE.isoformat(),
                          "last_updated": datetime.now(timezone.utc).isoformat(),
                          "total_participants": 0,
                          "total_points_distributed": 0
                      }
                  }, None

          points_data, file_sha = load_points_data()

          # Core functions
          def get_user_points(username):
              user_days = set()
              total = 0
              for entry in points_data["history"]:
                  if entry["username"] == username:
                      date = datetime.fromisoformat(entry["date"]).date()
                      if date >= EVENT_START_DATE:
                          day_key = date.isoformat()
                          if day_key not in user_days:
                              user_days.add(day_key)
                              total += min(entry["points"], MAX_POINTS_PER_DAY)
              return total

          def can_merge_pr(pr):
              for _ in range(MAX_RETRIES):
                  try:
                      pr = repo.get_pull(pr.number)
                      if pr.mergeable_state == "clean":
                          return True
                      if pr.mergeable_state == "dirty":
                          return False
                      time.sleep(RETRY_DELAY)
                  except Exception as e:
                      print(f"Merge check error: {str(e)}")
                      time.sleep(RETRY_DELAY)
              return False

          # Main processing
          processed_prs = 0
          for pr in repo.get_pulls(state='open'):
              username = pr.user.login
              print(f"\nProcessing PR #{pr.number} by @{username}")

              try:
                  # Skip if before event start
                  if pr.created_at.date() < EVENT_START_DATE:
                      print("PR created before event start date")
                      continue

                  # Skip if max points today
                  today_points = sum(
                      e["points"] for e in points_data["history"]
                      if e["username"] == username
                      and datetime.fromisoformat(e["date"]).date() == today
                  )
                  if today_points >= MAX_POINTS_PER_DAY:
                      print(f"Already has {today_points} points today")
                      continue

                  # Check mergeability
                  if not can_merge_pr(pr):
                      print(f"Cannot merge (state: {pr.mergeable_state})")
                      continue

                  # Try to merge
                  try:
                      # Approve first
                      try:
                          pr.create_review(event="APPROVE", body="Auto-approved")
                      except GithubException as e:
                          if "Resource not accessible" in str(e):
                              print("Insufficient permissions to approve")
                              continue
                          raise

                      # Then merge
                      merge_result = pr.merge(merge_method="squash")
                      if not merge_result.merged:
                          print("Merge returned False")
                          continue

                      # Update points
                      if username not in points_data["users"]:
                          points_data["users"][username] = {
                              "points": 0,
                              "social_media": ""
                          }

                      new_total = get_user_points(username) + POINTS_PER_PR
                      points_data["users"][username]["points"] = new_total

                      points_data["history"].append({
                          "username": username,
                          "points": POINTS_PER_PR,
                          "pr_number": pr.number,
                          "date": datetime.now(timezone.utc).isoformat(),
                          "reason": f"{EVENT_NAME}: PR #{pr.number}"
                      })
                      processed_prs += 1
                      print(f"Merged successfully. Total points: {new_total}")

                  except GithubException as e:
                      print(f"Merge failed: {str(e)}")
                      continue

              except Exception as e:
                  print(f"Processing error: {str(e)}")
                  continue

          # Final updates
          points_data["metadata"].update({
              "last_updated": datetime.now(timezone.utc).isoformat(),
              "total_participants": len(points_data["users"]),
              "total_points_distributed": sum(u["points"] for u in points_data["users"].values())
          })

          # Save with retries
          for attempt in range(3):
              try:
                  content = json.dumps(points_data, indent=2)
                  if file_sha:
                      repo.update_file(
                          path="points.json",
                          message=f"Update {processed_prs} PRs",
                          content=content,
                          sha=file_sha
                      )
                  else:
                      try:
                          repo.create_file(
                              path="points.json",
                              message="Initialize points",
                              content=content
                          )
                      except GithubException as e:
                          if "sha" in str(e):
                              contents = repo.get_contents("points.json")
                              file_sha = contents.sha
                              continue
                          raise
                  print("Points updated successfully")
                  break
              except Exception as e:
                  print(f"Save failed (attempt {attempt+1}): {str(e)}")
                  time.sleep(2)
          else:
              raise Exception("Failed to save points.json after 3 attempts")
          EOF
