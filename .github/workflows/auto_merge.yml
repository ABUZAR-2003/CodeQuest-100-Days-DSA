name: Auto Approve and Merge PRs with Points

on:
  schedule:
    - cron: '29 18 * * *'  # 11:59 PM IST
  workflow_dispatch:

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main  # Explicitly specify your default branch

      - name: Install Python dependencies
        run: pip install requests

      - name: Approve, Merge PRs and Assign Points
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          # Initialize points.json if missing
          if [ ! -f "points.json" ]; then
            echo '{"users":{},"history":[]}' > points.json
            git add points.json
            git commit -m "Initialize points tracking"
            git push origin main
          fi

          python3 <<EOF
          import os
          import requests
          import json
          from datetime import datetime

          token = os.environ['GITHUB_TOKEN']
          repo = os.environ['REPO']
          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3+json'
          }

          # Load points data
          with open('points.json', 'r') as f:
              points_data = json.load(f)

          # List open pull requests
          pr_url = f'https://api.github.com/repos/{repo}/pulls'
          prs = requests.get(pr_url, headers=headers).json()

          for pr in prs:
              pr_number = pr['number']
              username = pr['user']['login']
              print(f'Processing PR #{pr_number} by @{username}')

              # Approve the PR
              approve_url = f'https://api.github.com/repos/{repo}/pulls/{pr_number}/reviews'
              approve_payload = {
                  "event": "APPROVE",
                  "body": "Automatically approved by workflow"
              }
              approve_resp = requests.post(approve_url, headers=headers, json=approve_payload)
              print(f"Approval status: {approve_resp.status_code}")

              # Merge the PR
              merge_url = f'https://api.github.com/repos/{repo}/pulls/{pr_number}/merge'
              merge_payload = {
                  "merge_method": "squash"
              }
              merge_resp = requests.put(merge_url, headers=headers, json=merge_payload)
              print(f"Merge status: {merge_resp.status_code}")

              if merge_resp.status_code == 200:
                  # Add points to user
                  points = 3
                  points_data["users"][username] = points_data["users"].get(username, 0) + points

                  # Record history
                  points_data["history"].append({
                      "username": username,
                      "points": points,
                      "pr_number": pr_number,
                      "date": datetime.now().isoformat(),
                      "reason": "PR merged"
                  })

                  print(f"Assigned {points} points to @{username}")

          # Save points data
          with open('points.json', 'w') as f:
              json.dump(points_data, f, indent=2)
          EOF

          # Configure git
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          
          # Commit and push changes
          git pull --rebase origin main
          git add points.json
          git commit -m "Update points after PR merges" || echo "No changes to commit"
          git push origin main

      - name: Verify points file
        run: |
          echo "Current points.json content:"
          cat points.json
          echo -e "\n\nPublic URL:"
          echo "https://raw.githubusercontent.com/${{ github.repository }}/main/points.json"
