name: Auto Approve and Merge PRs with Points

on:
  schedule:
    - cron: '29 18 * * *'  # 11:59 PM IST
  workflow_dispatch:

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Setup Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Install dependencies
        run: pip install requests pygithub

      - name: Process PRs and update points
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<'EOF'
          import os
          from datetime import datetime
          from github import Github

          # Initialize
          token = os.environ['GITHUB_TOKEN']
          g = Github(token)
          repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])

          # Load or create points.json
          try:
              contents = repo.get_contents("points.json")
              points_data = eval(contents.decoded_content.decode())
          except:
              points_data = {"users": {}, "history": []}

          # Process PRs
          for pr in repo.get_pulls(state='open'):
              print(f"Processing PR #{pr.number} by @{pr.user.login}")
              
              # Approve PR
              try:
                  pr.create_review(event="APPROVE", body="Auto-approved by workflow")
                  print(f"Approved PR #{pr.number}")
              except Exception as e:
                  print(f"Approval failed: {str(e)}")

              # Merge PR
              try:
                  pr.merge(merge_method="squash")
                  print(f"Merged PR #{pr.number}")
                  
                  # Update points
                  username = pr.user.login
                  points = 3
                  
                  points_data["users"][username] = points_data["users"].get(username, 0) + points
                  points_data["history"].append({
                      "username": username,
                      "points": points,
                      "pr_number": pr.number,
                      "date": datetime.now().isoformat(),
                      "reason": "PR merged"
                  })
                  print(f"Added {points} points to @{username}")
                  
              except Exception as e:
                  print(f"Merge failed: {str(e)}")

          # Update points.json
          repo.update_file(
              path="points.json",
              message="Update points after PR merges",
              content=json.dumps(points_data, indent=2),
              sha=contents.sha if 'contents' in locals() else None
          )
          EOF
