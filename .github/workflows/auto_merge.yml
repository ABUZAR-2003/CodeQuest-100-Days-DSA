name: Daily PR Auto-Merge with Points

on:
  schedule:
    - cron: '29 18 * * *'  # 11:59 PM IST
  workflow_dispatch:

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: read
      statuses: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install PyGithub

      - name: Process PRs and update points
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<'EOF'
          import os
          import json
          import time
          from datetime import datetime, timezone, timedelta
          from github import Github
          from github.GithubException import GithubException

          # Configuration
          POINTS_PER_PR = 3
          MAX_POINTS_PER_DAY = 3
          EVENT_NAME = "Daily PR Challenge"
          MAX_RETRIES = 3
          RETRY_DELAY = 5  # seconds
          EVENT_START_DATE = datetime(2025, 4, 1).date()  # April 1, 2025

          # Initialize
          g = Github(os.environ['GITHUB_TOKEN'])
          repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
          today = datetime.now(timezone.utc).date()

          # Load or create points.json
          file_sha = None
          points_data = {
              "users": {},
              "history": [],
              "metadata": {
                  "event": EVENT_NAME,
                  "points_per_pr": POINTS_PER_PR,
                  "max_points_per_day": MAX_POINTS_PER_DAY,
                  "event_start_date": EVENT_START_DATE.isoformat(),
                  "last_updated": datetime.now(timezone.utc).isoformat(),
                  "total_participants": 0,
                  "total_points_distributed": 0
              }
          }

          try:
              contents = repo.get_contents("points.json")
              points_data = json.loads(contents.decoded_content.decode())
              file_sha = contents.sha
              # Ensure social_media field exists for all users
              for username in points_data["users"]:
                  if "social_media" not in points_data["users"][username]:
                      points_data["users"][username]["social_media"] = ""
          except Exception as e:
              print(f"Creating new points.json file: {str(e)}")

          def get_user_points_from_history(username):
              user_days = set()
              total_points = 0
              
              for entry in points_data["history"]:
                  if entry["username"] == username:
                      entry_date = datetime.fromisoformat(entry["date"]).date()
                      if entry_date >= EVENT_START_DATE:
                          day_key = entry_date.isoformat()
                          if day_key not in user_days:
                              user_days.add(day_key)
                              total_points += min(entry["points"], MAX_POINTS_PER_DAY)
              return total_points

          def is_pr_mergeable(pr):
              for attempt in range(MAX_RETRIES):
                  try:
                      pr = repo.get_pull(pr.number)  # Refresh PR object
                      if pr.mergeable_state == "clean":
                          return True
                      print(f"Attempt {attempt + 1}: PR #{pr.number} state: {pr.mergeable_state}")
                      time.sleep(RETRY_DELAY)
                  except Exception as e:
                      print(f"Error checking mergeability: {str(e)}")
                      time.sleep(RETRY_DELAY)
              return False

          # Process all open PRs
          processed_prs = 0
          for pr in repo.get_pulls(state='open'):
              username = pr.user.login
              print(f"\nProcessing PR #{pr.number} by @{username}")
              
              try:
                  # Check if user already earned points today
                  pr_created_date = pr.created_at.date()
                  if pr_created_date < EVENT_START_DATE:
                      print(f"PR #{pr.number} created before event start date, skipping")
                      continue
                      
                  # Check mergeability
                  if not is_pr_mergeable(pr):
                      print(f"PR #{pr.number} cannot be merged (state: {pr.mergeable_state})")
                      continue
                      
                  # Approve PR
                  try:
                      pr.create_review(event="APPROVE", body="Auto-approved by workflow")
                  except Exception as e:
                      print(f"Couldn't approve PR #{pr.number}: {str(e)}")
                      continue
                      
                  # Merge PR
                  try:
                      merge_result = pr.merge(merge_method="squash")
                      if not merge_result.merged:
                          print(f"Merge failed for PR #{pr.number}")
                          continue
                          
                      # Update points
                      if username not in points_data["users"]:
                          points_data["users"][username] = {
                              "points": 0,
                              "social_media": ""
                          }
                      
                      # Calculate points based on PRs from April 1st
                      new_points = get_user_points_from_history(username) + POINTS_PER_PR
                      points_data["users"][username]["points"] = new_points
                      
                      points_data["history"].append({
                          "username": username,
                          "points": POINTS_PER_PR,
                          "pr_number": pr.number,
                          "date": datetime.now(timezone.utc).isoformat(),
                          "reason": f"{EVENT_NAME}: {POINTS_PER_PR} points for PR #{pr.number}"
                      })
                      processed_prs += 1
                      print(f"Successfully merged PR #{pr.number}. Total points for @{username}: {new_points}")
                      
                  except Exception as e:
                      print(f"Merge failed for PR #{pr.number}: {str(e)}")
                      continue
                      
              except Exception as e:
                  print(f"Error processing PR #{pr.number}: {str(e)}")
                  continue

          # Update metadata
          points_data["metadata"]["last_updated"] = datetime.now(timezone.utc).isoformat()
          points_data["metadata"]["total_participants"] = len(points_data["users"])
          points_data["metadata"]["total_points_distributed"] = sum(
              user_data["points"] for user_data in points_data["users"].values()
          )

          # Save updated points
          try:
              updated_content = json.dumps(points_data, indent=2)
              commit_message = f"Update points: {processed_prs} PRs processed on {today.isoformat()}"
              
              if file_sha:
                  repo.update_file(
                      path="points.json",
                      message=commit_message,
                      content=updated_content,
                      sha=file_sha
                  )
              else:
                  repo.create_file(
                      path="points.json",
                      message="Initialize points tracking",
                      content=updated_content
                  )
              print("Successfully updated points.json")
          except Exception as e:
              print(f"Failed to update points.json: {str(e)}")
              raise e
          EOF
